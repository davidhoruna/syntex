-- Enable the pgvector extension if not already enabled
CREATE EXTENSION IF NOT EXISTS vector;

-- Check if the documents table exists
DO $$
BEGIN
    IF EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'documents'
    ) THEN
        -- Table exists, check if embedding column exists
        IF NOT EXISTS (
            SELECT FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND table_name = 'documents' 
            AND column_name = 'embedding'
        ) THEN
            -- Add embedding column if it doesn't exist
            ALTER TABLE documents ADD COLUMN embedding vector(1536);
        END IF;
    ELSE
        -- Create the documents table if it doesn't exist
        CREATE TABLE documents (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            content text,
            metadata jsonb,
            embedding vector(1536)
        );
    END IF;
END
$$;

-- Create a function to match documents (if it doesn't exist)
CREATE OR REPLACE FUNCTION match_documents(
    query_embedding vector(1536),
    match_count int DEFAULT 5,
    filter jsonb DEFAULT '{}'
)
RETURNS TABLE (
    id bigint,
    content text,
    metadata jsonb,
    similarity float
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT
        documents.id,
        documents.content,
        documents.metadata,
        1 - (documents.embedding <=> query_embedding) AS similarity
    FROM documents
    WHERE metadata @> filter
    ORDER BY similarity DESC
    LIMIT match_count;
END;
$$;

-- Create a search index for better performance (optional but recommended)
CREATE INDEX IF NOT EXISTS documents_embedding_idx ON documents 
USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Grant permissions if using Row Level Security
GRANT EXECUTE ON FUNCTION match_documents TO anon, authenticated, service_role; 